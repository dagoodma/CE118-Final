/*
 * File:   IR.c
 * Author: dagoodma, hahernan, jurjohns
 *
 * Infrared beacon sensor module. Switches between the main and angled
 * beacon sensors to aquire readings from both.
 *
 */

#include <p32xxxx.h>
#include "serial.h"
#include "timers.h"
#include "PORTS.h"
//#include "LED.h"

/*******************************************************************************
 * PRIVATE #DEFINES                                                            *
 ******************************************************************************/
//#define IR_TEST

#define DEBUG_VERBOSE
#ifdef DEBUG_VERBOSE
    #define dbprintf(...) printf(__VA_ARGS__)
#else
    #define dbprintf(...)
#endif

#define TIMER_NUM 3
#define UPDATE_DELAY 2 // ms

#define SENSORCOUNT 2

#define IR_BIT PORTZ06_BIT
#define IR_TRIS PORTZ06_TRIS

#define READCOUNT 0x4
#define READSHIFT 0x1 // amount to divide by (2)

// Delay times
#define READDELAY 2 // msecs

/*******************************************************************************
 * PRIVATE VARIABLES                                                           *
 ******************************************************************************/


enum irIndex {BUMPER_RIGHT_I, BUMPER_LEFT_I, BUMPER_CENTER_I};
static unsigned char irCounter[] = {0, 0};
static unsigned int irPort[] = {0, 0};

/**
static unsigned int const ledPortMap[] = {
    LED_BANK1_3,
    LED_BANK2_3,
    LED_BANK3_3,
    LED_BANK2_0, 
    LED_BANK2_2,
    LED_BANK1_2,
    LED_BANK3_2
};
 */



/*******************************************************************************
 * PRIVATE FUNCTIONS PROTOTYPES                                                *
 ******************************************************************************/

static void UpdateBumperCounters();
static char ReadBumpers();

/*******************************************************************************
 * PRIVATE FUNCTIONS                                                           *
 ******************************************************************************/

static void UpdateIRCounters() {
    int i;
    ReadIR();
    // Iterate over IR detectors and adjust saturating counters
    for (i = 0; i < BUMPERCOUNT; i++) {
        if (bumperPort[i]) {
            if (bumperCounter[i] < MAXCOUNT)
                bumperCounter[i] += 1;
        }
        else {
            if (bumperCounter[i] > 0)
                bumperCounter[i] -= 1;
        }
    }

}

static void ReadIR() {
    irPort[IR_MAIN_I] = IR_MAIN_BIT;
    irPort[IR_ANGLE_I] = IR_ANGLE_BIT;
    return SUCCESS;
}

/*******************************************************************************
 * PUBLIC FUNCTIONS                                                           *
 ******************************************************************************/
char Bumper_Init() {
    dbprintf("\nInitializing the Bumper Sensor Module.");

    InitTimer(TIMER_NUM, UPDATE_DELAY);

    // Define inputs
    BUMPER_RIGHT_TRIS = 1;
    BUMPER_LEFT_TRIS = 1;
    BUMPER_CENTER_TRIS = 1;

    dbprintf("\nBumper sensors initialized (%d)", BUMPERCOUNT);

    return SUCCESS;

}

char Bumper_Update() {
    if (IsTimerExpired(TIMER_NUM)) {
        UpdateBumperCounters();
        InitTimer(TIMER_NUM, UPDATE_DELAY);
    }
    return SUCCESS;
}

char Bumper_LeftTriggered() {
    return bumperPort[BUMPER_LEFT_I]; // bumperCounter[BUMPER_LEFT_I] > (MAXCOUNT / 2);
}

char Bumper_CenterTriggered() {
    return bumperPort[BUMPER_CENTER_I]; // bumperCounter[BUMPER_CENTER_I] > (MAXCOUNT / 2);
}

char Bumper_RightTriggered() {
    return bumperPort[BUMPER_RIGHT_I]; // bumperCounter[BUMPER_RIGHT_I] > (MAXCOUNT / 2);
}

char Bumper_End() {
    StopTimer(TIMER_NUM);
    return SUCCESS;
}

/*******************************************************************************
 * TEST HARNESS                                                                *
 ******************************************************************************/
#ifdef BUMP_TEST
#ifndef DEBUG_VERBOSE
#define DEBUG_VERBOSE
#endif

#define NOPCOUNT 990000
#define DELAY() for(i=0;i < NOPCOUNT; i++) __asm("nop")

int main(void) {
    SERIAL_Init();
    int i = 0;

    INTEnableSystemMultiVectoredInt();
